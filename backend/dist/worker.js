!function(e){var t={};function a(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)a.d(n,s,function(t){return e[t]}.bind(null,s));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=1)}([function(e,t){e.exports={Router:({base:e="",routes:t=[]}={})=>({__proto__:new Proxy({},{get:(a,n,s)=>(a,...o)=>t.push([n.toUpperCase(),RegExp(`^${(e+a).replace(/(\/?)\*/g,"($1.*)?").replace(/\/$/,"").replace(/:(\w+)(\?)?(\.)?/g,"$2(?<$1>[^/]+)$2$3").replace(/\.(?=[\w(])/,"\\.")}/*$`),o])&&s}),routes:t,async handle(e,...a){let n,s,o=new URL(e.url);for(var[r,c,i]of(e.query=Object.fromEntries(o.searchParams),t))if((r===e.method||"ALL"===r)&&(s=o.pathname.match(c)))for(var d of(e.params=s.groups,i))if(void 0!==(n=await d(e.proxy||e,...a)))return n}})}},function(e,t,a){"use strict";a.r(t);var n=a(0);const s="https://api.cloudflare.com/client/v4/accounts/",o={"Access-Control-Allow-Origin":"*","Content-type":"application/json"},r="https://api.cloudflare.com/client/v4/accounts/",c={"Access-Control-Allow-Origin":"*","Content-type":"application/json"},i="https://api.cloudflare.com/client/v4/accounts/",d={"Access-Control-Allow-Origin":"*","Content-type":"application/json"},u=(e,t,a,n)=>fetch(`${i+t}/storage/kv/namespaces/${a}/values/${n}`,{headers:{Authorization:e}}).then(e=>e.json()),p=(e,t,a,n,s)=>fetch(`${i+t}/storage/kv/namespaces/${a}/values/${n}`,{method:"PUT",headers:{Authorization:e,"Content-Type":"text/plain"},body:JSON.stringify(s)}).then(e=>e.json()),l=Object(n.Router)();l.options("*",e=>{const t={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET,POST,PUT,DELETE,OPTIONS","Access-Control-Max-Age":"86400"};let a=e.headers;if(null!==a.get("Origin")&&null!==a.get("Access-Control-Request-Method")&&null!==a.get("Access-Control-Request-Headers")){let a={...t,"Access-Control-Allow-Headers":e.headers.get("Access-Control-Request-Headers")};return new Response(null,{headers:a})}return new Response(null,{headers:{Allow:"GET,POST,PUT,DELETE,OPTIONS"}})}),l.get("/:accountId",async e=>{const t=e.params.accountId,a=e.headers.get("Authorization"),n=await fetch(s+t+"/storage/kv/namespaces",{headers:{Authorization:a}}).then(e=>e.json());return new Response(JSON.stringify(n,null,2),{headers:o})}),l.post("/:accountId",async e=>{const t=e.params.accountId,a=await e.json(),n=e.headers.get("Authorization"),r=await fetch(s+t+"/storage/kv/namespaces",{method:"POST",headers:{Authorization:n,"Content-Type":"application/json"},body:JSON.stringify(a)}).then(e=>e.json());return new Response(JSON.stringify(r,null,2),{headers:o})}),l.put("/:accountId/:namespaceId",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.headers.get("Authorization"),r=await e.json(),c=await fetch(s+t+"/storage/kv/namespaces/"+a,{method:"PUT",headers:{Authorization:n,"Content-Type":"application/json"},body:JSON.stringify(r)}).then(e=>e.json());return new Response(JSON.stringify(c,null,2),{headers:o})}),l.delete("/:accountId/:namespaceId",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.headers.get("Authorization"),r=await fetch(s+t+"/storage/kv/namespaces/"+a,{method:"DELETE",headers:{Authorization:n}}).then(e=>e.json());return new Response(JSON.stringify(r,null,2),{headers:o})}),l.get("/:accountId/:namespaceId/keys",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.headers.get("Authorization"),s=await fetch(`${r+t}/storage/kv/namespaces/${a}/keys`,{headers:{Authorization:n}}).then(e=>e.json());return new Response(JSON.stringify(s,null,2),{headers:c})}),l.post("/:accountId/:namespaceId/keys",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.headers.get("Authorization"),s=(await e.json()).title,o=await fetch(`${r+t}/storage/kv/namespaces/${a}/values/${s}`,{method:"PUT",headers:{Authorization:n,"Content-Type":"text/plain"},body:"[]"}).then(e=>e.json());return new Response(JSON.stringify(o,null,2),{headers:c})}),l.get("/:accountId/:namespaceId/:keyName",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.params.keyName,s=e.headers.get("Authorization"),o=await u(s,t,a,n);return new Response(JSON.stringify(o,null,2),{headers:d})}),l.post("/:accountId/:namespaceId/:keyName",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.params.keyName,s=e.headers.get("Authorization"),o=await e.json();o.id=crypto.randomUUID();const r=await u(s,t,a,n);r.push(o);const c=await p(s,t,a,n,r);return new Response(JSON.stringify(c,null,2),{headers:d})}),l.get("/:accountId/:namespaceId/:keyName/:itemId",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.params.keyName,s=e.params.itemId,o=e.headers.get("Authorization"),r=(await u(o,t,a,n)).find(e=>e.id===s);return new Response(JSON.stringify(r,null,2),{headers:d})}),l.put("/:accountId/:namespaceId/:keyName/:itemId",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.params.keyName,s=e.params.itemId,o=e.headers.get("Authorization"),r=await e.json(),c=await u(o,t,a,n),i=c.findIndex(e=>e.id===s);i>=0&&(c[i]=r,c[i].id=s);const l=await p(o,t,a,n,c);return new Response(JSON.stringify(l,null,2),{headers:d})}),l.delete("/:accountId/:namespaceId/:keyName/:itemId",async e=>{const t=e.params.accountId,a=e.params.namespaceId,n=e.params.keyName,s=e.params.itemId,o=e.headers.get("Authorization"),r=await u(o,t,a,n),c=r.findIndex(e=>e.id===s);c>=0&&r.splice(c,1),console.log(r);const i=await p(o,t,a,n,r);return new Response(JSON.stringify(i,null,2),{headers:d})}),l.all("*",()=>new Response("404, not found!",{status:404})),addEventListener("fetch",e=>{e.respondWith(l.handle(e.request))})}]);