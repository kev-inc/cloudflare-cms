!function(e){var a={};function t(n){if(a[n])return a[n].exports;var s=a[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=a,t.d=function(e,a,n){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var s in e)t.d(n,s,function(a){return e[a]}.bind(null,s));return n},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="",t(t.s=1)}([function(e,a){e.exports={Router:({base:e="",routes:a=[]}={})=>({__proto__:new Proxy({},{get:(t,n,s)=>(t,...o)=>a.push([n.toUpperCase(),RegExp(`^${(e+t).replace(/(\/?)\*/g,"($1.*)?").replace(/\/$/,"").replace(/:(\w+)(\?)?(\.)?/g,"$2(?<$1>[^/]+)$2$3").replace(/\.(?=[\w(])/,"\\.")}/*$`),o])&&s}),routes:a,async handle(e,...t){let n,s,o=new URL(e.url);for(var[r,c,i]of(e.query=Object.fromEntries(o.searchParams),a))if((r===e.method||"ALL"===r)&&(s=o.pathname.match(c)))for(var p of(e.params=s.groups,i))if(void 0!==(n=await p(e.proxy||e,...t)))return n}})}},function(e,a,t){"use strict";t.r(a);var n=t(0);const s="https://api.cloudflare.com/client/v4/accounts/",o={"Access-Control-Allow-Origin":"*","Content-type":"application/json"},r="https://api.cloudflare.com/client/v4/accounts/",c={"Access-Control-Allow-Origin":"*","Content-type":"application/json"},i="https://api.cloudflare.com/client/v4/accounts/",p={"Access-Control-Allow-Origin":"*","Content-type":"application/json"},d=(e,a,t,n)=>fetch(`${i+a}/storage/kv/namespaces/${t}/values/${n}`,{headers:{Authorization:e}}).then(e=>e.json()),u=(e,a,t,n,s)=>fetch(`${i+a}/storage/kv/namespaces/${t}/values/${n}`,{method:"PUT",headers:{Authorization:e,"Content-Type":"text/plain"},body:JSON.stringify(s)}).then(e=>e.json()),l=Object(n.Router)();l.get("/",()=>new Response("Hello, world! This is the root page of your Worker template.")),l.options("*",e=>{const a={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET,POST,PUT,DELETE,OPTIONS","Access-Control-Max-Age":"86400"};let t=e.headers;if(null!==t.get("Origin")&&null!==t.get("Access-Control-Request-Method")&&null!==t.get("Access-Control-Request-Headers")){let t={...a,"Access-Control-Allow-Headers":e.headers.get("Access-Control-Request-Headers")};return new Response(null,{headers:t})}return new Response(null,{headers:{Allow:"GET,POST,PUT,DELETE,OPTIONS"}})}),l.get("/namespaces/:accountId",async e=>{const a=e.params.accountId,t=e.headers.get("Authorization"),n=await fetch(s+a+"/storage/kv/namespaces",{headers:{Authorization:t}}).then(e=>e.json());return new Response(JSON.stringify(n,null,2),{headers:o})}),l.post("/namespaces/:accountId",async e=>{const a=e.params.accountId,t=await e.json(),n=e.headers.get("Authorization"),r=await fetch(s+a+"/storage/kv/namespaces",{method:"POST",headers:{Authorization:n,"Content-Type":"application/json"},body:JSON.stringify(t)}).then(e=>e.json());return new Response(JSON.stringify(r,null,2),{headers:o})}),l.put("/namespaces/:accountId/:namespaceId",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.headers.get("Authorization"),r=await e.json(),c=await fetch(s+a+"/storage/kv/namespaces/"+t,{method:"PUT",headers:{Authorization:n,"Content-Type":"application/json"},body:JSON.stringify(r)}).then(e=>e.json());return new Response(JSON.stringify(c,null,2),{headers:o})}),l.delete("/namespaces/:accountId/:namespaceId",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.headers.get("Authorization"),r=await fetch(s+a+"/storage/kv/namespaces/"+t,{method:"DELETE",headers:{Authorization:n}}).then(e=>e.json());return new Response(JSON.stringify(r,null,2),{headers:o})}),l.get("/namespaces/:accountId/:namespaceId/keys",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.headers.get("Authorization"),s=await fetch(`${r+a}/storage/kv/namespaces/${t}/keys`,{headers:{Authorization:n}}).then(e=>e.json());return new Response(JSON.stringify(s,null,2),{headers:c})}),l.post("/namespaces/:accountId/:namespaceId/keys",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.headers.get("Authorization"),s=(await e.json()).title,o=await fetch(`${r+a}/storage/kv/namespaces/${t}/values/${s}`,{method:"PUT",headers:{Authorization:n,"Content-Type":"text/plain"},body:"[]"}).then(e=>e.json());return new Response(JSON.stringify(o,null,2),{headers:c})}),l.get("/namespaces/:accountId/:namespaceId/:keyName",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.params.keyName,s=e.headers.get("Authorization"),o=await d(s,a,t,n);return new Response(JSON.stringify(o,null,2),{headers:p})}),l.post("/namespaces/:accountId/:namespaceId/:keyName",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.params.keyName,s=e.headers.get("Authorization"),o=await e.json();o.id=crypto.randomUUID();const r=await d(s,a,t,n);r.push(o);const c=await u(s,a,t,n,r);return new Response(JSON.stringify(c,null,2),{headers:p})}),l.get("/namespaces/:accountId/:namespaceId/:keyName/:itemId",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.params.keyName,s=e.params.itemId,o=e.headers.get("Authorization"),r=(await d(o,a,t,n)).find(e=>e.id===s);return new Response(JSON.stringify(r,null,2),{headers:p})}),l.put("/namespaces/:accountId/:namespaceId/:keyName/:itemId",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.params.keyName,s=e.params.itemId,o=e.headers.get("Authorization"),r=await e.json(),c=await d(o,a,t,n),i=c.findIndex(e=>e.id===s);i>=0&&(c[i]=r,c[i].id=s);const l=await u(o,a,t,n,c);return new Response(JSON.stringify(l,null,2),{headers:p})}),l.delete("/namespaces/:accountId/:namespaceId/:keyName/:itemId",async e=>{const a=e.params.accountId,t=e.params.namespaceId,n=e.params.keyName,s=e.params.itemId,o=e.headers.get("Authorization"),r=await d(o,a,t,n),c=r.findIndex(e=>e.id===s);c>=0&&r.splice(c,1),console.log(r);const i=await u(o,a,t,n,r);return new Response(JSON.stringify(i,null,2),{headers:p})}),l.all("*",()=>new Response("404, not found!",{status:404})),addEventListener("fetch",e=>{e.respondWith(l.handle(e.request))})}]);